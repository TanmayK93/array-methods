{"version":3,"sources":["actions/userActions.js","components/Users.js","actions/types.js","containers/AddUsers.js","App.js","serviceWorker.js","reducers/usersReducer.js","reducers/index.js","store.js","index.js"],"names":["userList","getRandomInt","max","Math","floor","random","Users","this","props","fetchUsers","number","toFixed","replace","nextProps","newUser","users","unshift","map","user","key","id","className","name","formatMoney","money","Component","connect","state","usersData","dispatch","a","fetch","res","json","data","username","type","payload","AddUsers","error","onSubmit","bind","onChange","e","preventDefault","formIsValid","length","setState","addNewUser","target","value","style","color","userData","App","useDispatch","userState","useSelector","totalWealth","onClick","filter","sort","b","reduce","acc","Boolean","window","location","hostname","match","initialState","combineReducers","action","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.76e6f7a3.chunk.js","sourcesContent":["import { FETCH_USERS, NEW_USER, DOUBLE_MONEY, WEALTH_GREATER_THAN_100, SORT_BY_RICHEST, CALCULATE_TOTAL_WEALTH } from './types';\n\nlet userList = []\n\nconst getRandomInt = (max) => {\n    return Math.floor(Math.random() * Math.floor(max));\n}\n\n\nexport const fetchUsers = () => async dispatch => {\n    const res = await fetch('https://jsonplaceholder.typicode.com/users');\n    const data = await res.json();\n    userList = data.map(user => {\n        const newUser = {\n            id: user.id,\n            name: user.name,\n            username: user.username,\n            money: getRandomInt(200)\n        }\n        return newUser;\n    })\n    await dispatch({\n        type: FETCH_USERS,\n        payload: userList\n    })\n};\n\nexport const addNewUser = userData => async dispatch => {\n    const newUser = {\n        id: userList.length + 1,\n        name: userData.name,\n        money: getRandomInt(100)\n    };\n    dispatch({\n        type: NEW_USER,\n        payload: newUser\n    })\n}\n\nexport const doubleMoney = userData => dispatch => {\n    const result = userData.map(user => {\n        return { ...user, money: user.money * 2 };\n    });\n    dispatch({\n        type: DOUBLE_MONEY,\n        payload: result\n    })\n}\n\nexport const showMillionaires = userData => dispatch => {\n    const result = userData.filter(user => user.money > 100);\n    dispatch({\n        type: WEALTH_GREATER_THAN_100,\n        payload: result\n    })\n}\n\nexport const sortByRichest = userData => dispatch => {\n    const sortedData = userData.sort((a, b) => b.money - a.money);\n\n    const result = sortedData.map(user => {\n        return { ...user };\n    });\n\n    dispatch({\n        type: SORT_BY_RICHEST,\n        payload: result\n    })\n}\n\nexport const calculateTotalWealth = userData => dispatch => {\n\n    const wealth = userData.reduce((acc, user) => (acc += user.money), 0);\n\n    dispatch({\n        type: CALCULATE_TOTAL_WEALTH,\n        payload: wealth\n    })\n}","import React, { Component } from 'react'\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { fetchUsers } from '../actions/userActions';\n\nclass Users extends Component {\n\n    componentWillMount() {\n        this.props.fetchUsers();\n    }\n\n    formatMoney(number) {\n        return '$' + number.toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');\n    }\n\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.newUser !== this.props.users) {\n            this.props.users.unshift(nextProps.newUser);\n        }\n    }\n\n\n    render() {\n        return (\n            <div>\n                {this.props.users.map(user => (\n                    <div key={user.id} className=\"person\">\n                        <strong>{user.name}</strong>\n                        {this.formatMoney(user.money)}\n                    </div>\n                ))}\n\n            </div>\n        )\n    }\n}\n\nUsers.propTypes = {\n    fetchUsers: PropTypes.func.isRequired,\n    users: PropTypes.array.isRequired,\n    newUser: PropTypes.object,\n};\n\nconst mapStateToProps = state => ({\n    users: state.users.usersData,\n    newUser: state.users.newUser,\n});\n\nexport default connect(mapStateToProps, { fetchUsers })(Users);","export const FETCH_USERS = 'FETCH_USERS';\nexport const NEW_USER = 'NEW_USER';\nexport const DOUBLE_MONEY = 'DOUBLE_MONEY';\nexport const WEALTH_GREATER_THAN_100 = 'WEALTH_GREATER_THAN_100';\nexport const SORT_BY_RICHEST = 'SORT_BY_RICHEST';\nexport const CALCULATE_TOTAL_WEALTH = 'CALCULATE_TOTAL_WEALTH';","import React, { Component } from 'react'\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { addNewUser } from '../actions/userActions';\n\nclass AddUsers extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: '',\n            error: ''\n        };\n        this.onSubmit = this.onSubmit.bind(this);\n        this.onChange = this.onChange.bind(this);\n    }\n\n    onSubmit(e) {\n        e.preventDefault();\n        let formIsValid = true;\n        let name = this.state.name\n\n        if (name.length === 0) {\n            formIsValid = false;\n            this.setState({ error: \"Name field Cannot be empty\" });\n        } else {\n            formIsValid = true;\n        }\n\n        if (formIsValid) {\n            const user = {\n                name: this.state.name,\n            };\n\n            this.props.addNewUser(user)\n            this.setState({\n                name: '',\n                error: ''\n            });\n        }\n    }\n\n    onChange(e) {\n        this.setState({ [e.target.name]: e.target.value });\n    }\n\n    render() {\n        return (\n            <div>\n                <form onSubmit={this.onSubmit}>\n                    <div>\n                        <label>Name: </label>\n                        <br />\n                        <input\n                            type=\"text\"\n                            name=\"name\"\n                            onChange={this.onChange}\n                            value={this.state.name}\n                        />\n                        <span style={{ color: \"red\" }}>{this.state.error}</span>\n                    </div>\n                    <button type=\"submit\">Add User </button>\n                </form>\n            </div>\n        )\n    }\n}\n\nAddUsers.propTypes = {\n    addNewUser: PropTypes.func.isRequired,\n};\n\nexport default connect(null, { addNewUser })(AddUsers);","import React from 'react';\nimport './App.css';\nimport Users from \"./components/Users\"\nimport AddUsers from './containers/AddUsers'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { doubleMoney, showMillionaires, sortByRichest, calculateTotalWealth } from './actions/userActions'\n\nfunction App() {\n  const dispatch = useDispatch();\n  const userState = useSelector(state => state.users.usersData)\n  const totalWealth = useSelector(state => state.users.totalWealth)\n\n  const formatMoney = (number) => {\n    return '$' + number.toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Array Methods</h1>\n      <div className=\"container\">\n        <aside>\n          <AddUsers />\n          <button type=\"submit\" onClick={() => dispatch(doubleMoney(userState))}>Double Money</button>\n          <button type=\"submit\" onClick={() => dispatch(showMillionaires(userState))}>Wealth > 100 </button>\n          <button type=\"submit\" onClick={() => dispatch(sortByRichest(userState))}>Sort by Richest</button>\n          <button type=\"submit\" onClick={() => dispatch(calculateTotalWealth(userState))}>Calculate entire Wealth</button>\n        </aside>\n\n        <main id=\"main\">\n          <h2><strong>Person</strong> Wealth</h2>\n          <Users />\n          <hr />\n          {totalWealth ? (\n            <h2>Total Wealth: <strong>{formatMoney(totalWealth)}</strong></h2>) : <p></p>}\n        </main>\n      </div>\n    </div >\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { FETCH_USERS, NEW_USER, DOUBLE_MONEY, WEALTH_GREATER_THAN_100, SORT_BY_RICHEST, CALCULATE_TOTAL_WEALTH } from '../actions/types';\n\nconst initialState = {\n    usersData: [],\n    newUser: {},\n    totalWealth: 0\n};\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case FETCH_USERS:\n            return {\n                ...state,\n                usersData: action.payload\n            };\n        case NEW_USER:\n            return {\n                ...state,\n                newUser: action.payload,\n                totalWealth: 0\n            };\n        case DOUBLE_MONEY:\n            return {\n                ...state,\n                usersData: action.payload,\n                totalWealth: 0\n            };\n        case WEALTH_GREATER_THAN_100:\n            return {\n                ...state,\n                usersData: action.payload,\n                totalWealth: 0\n            };\n        case SORT_BY_RICHEST:\n            return {\n                ...state,\n                usersData: action.payload\n            };\n        case CALCULATE_TOTAL_WEALTH:\n            return {\n                ...state,\n                totalWealth: action.payload\n            }\n        default:\n            return state;\n    }\n}","import { combineReducers } from 'redux';\nimport usersReducer from './usersReducer';\n\nexport default combineReducers({\n    users: usersReducer\n});","import { createStore, compose, applyMiddleware } from 'redux';\nimport rootReducer from './reducers';\nimport thunk from 'redux-thunk';\n\n\nconst initialState = {};\nconst middleware = [thunk];\n\n\nconst store = createStore(\n    rootReducer,\n    initialState,\n    compose(\n        applyMiddleware(...middleware),\n        window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n    )\n);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}